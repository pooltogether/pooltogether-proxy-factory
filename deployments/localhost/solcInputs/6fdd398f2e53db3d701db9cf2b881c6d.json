{
  "language": "Solidity",
  "sources": {
    "contracts/external/openzeppelin/ProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0 <0.7.0;\n\n// solhint-disable no-inline-assembly\n// solhint-disable avoid-low-level-calls\ncontract ProxyFactory {\n\n  event ProxyCreated(address proxy);\n\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    bytes20 targetBytes = bytes20(_logic);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, clone, 0x37)\n    }\n\n    emit ProxyCreated(address(proxy));\n\n    if(_data.length > 0) {\n      (bool success,) = proxy.call(_data);\n      require(success, \"ProxyFactory/constructor-call-failed\");\n    }\n  }\n}\n"
    },
    "contracts/GenericProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0 <0.7.0;\n\nimport \"./external/openzeppelin/ProxyFactory.sol\";\n\n/// @title PoolTogether Generic Minimal ProxyFactory\n/// @notice EIP-1167 Minimal proxy factory pattern for creating proxy contracts\ncontract GenericProxyFactory is ProxyFactory {\n\n  /// @notice\n  constructor () public {\n    // blank?\n  }\n\n  /// @notice \n  function create(address instance, bytes calldata data) public returns (address) {\n    address instanceCreated = deployMinimal(instance, data);\n\n    // aTokenYieldSource.initialize(_aToken, _lendingPoolAddressesProviderRegistry, _decimals, _name, _symbol);\n    // aTokenYieldSource.transferOwnership(_owner);\n\n    return instanceCreated;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}